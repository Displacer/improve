ImProve is an imperative programming language embedded in Haskell for
high assurance applications.  ImProve uses infinite state, unbounded
model checking to verify programs adhere to specifications.
Yices (required) is the backend SMT solver.


Release Notes:

0.2.2    12/12/10

- Theorem name formatting (removed unique identifer).
- Better trace formatting.

0.2.1    12/09/10

- bugfix: lemmas referenced in induction step.

0.2.0    12/08/10

- Released 'assert' with 'theorem', which provides control of k
  and the ability to provide lemmas to simplify the proof.
- Verification assumes property is true for inductive steps up to k.
  Reduces the number of steps to converge on proof for some invariants.

0.1.6    12/02/10

- Made Statement an instance of Show.
- Made V a an instance of Eq and Ord.
- Created untyped variables (UV) and extended varInfo.
- Bugfix: shadow variable in Label collides with structure name.

0.1.5    11/23/10

- Loosened mtl requirements (mtl < 2.1).

0.1.4    11/22/10

- Bugfix: verification programming trimming: expressions in assertions in if statements not captured.
- Better annotation for assertions.

0.1.3    11/18/10

- Started state space narrowing optimizations: simple code analysis
  that reduce narrow the reachable state, thus reducing the
  number of inconclusive results.

